
#This will first go through making the summary dataframe that is the basis for mean_latitude, then go through getting values for sst, then combine into a graph


#Creating a summary dataframe containing a mean latitude, a date, colony of origin and a couple of other variables used in my initial exploratory analysis
#will summarise each bird (stored as dfs in list1) into one row of data


#splitting by birdlist1 <- list()
list1 <- split(FilteredReadyForHoming, FilteredReadyForHoming$Ring)

###Getting one date for each journey
dates <- list()

for(i in seq_along(list1)) {
  dates[[i]] <- (mean(list1[[1]]$Timestamp))
}


for (i in seq_along(list1)) {
  df <- list1[[i]]
  mean_time <- mean(df$Timestamp)
  dates[[i]] <- mean_time
}

(dates)

#Calculating the total distance of each trip
total_dist <- list()
for(i in seq_along(list1)) {
  total_dist[[i]] <- (sum(list1[[i]]$TotalDist, na.rm = TRUE))
}

#Calculating maximum and minimum relative latitude for each journey

max_north_difference <- list()
max_south_difference <- list()

for(i in 1:length(list1)){
  max_north_difference[[i]] <- max(list1[[i]]$Lat_difference)
}

for(i in 1:length(list1)){
  max_south_difference[[i]] <- min(list1[[i]]$Lat_difference) 
}

head(max_south_difference) #testing


#Getting a value for colony 

#wanted to get just one value for colony from each df in list 2 (as they should all be the same)
#couldn't use mode() as charachter data so creating a function to find the most common charachter
mode_char <- function(x) unique(x)[which.max(tabulate(match(x, unique(x))))] 
mode_char(list1[[1]]$Colony) #testing

colony_id <- list()
for (i in seq_along(list1)) {
  colony_id[[i]] <- mode_char(list1[[i]]$Colony)
}
colony_id[[5]]
summary(colony_id) #testing

#getting a ring number for each bird

rings <- list()
for (i in seq_along(list1)) {
  rings[[i]] <- mode_char(list1[[i]]$Ring)
}


####Calculating mean latitude differences
mean_latitude <- list()
for(i in 1:length(list1)){
  mean_latitude[[i]] <- mean(list1[[i]]$Lat_difference)}

summary(mean_latitude)


#verifying that the lengths of the lists are the same length before binding
lengths_list <- sapply(list(dates, max_north_difference, max_south_difference, mean_latitude, colony_id), length)
print(lengths_list)


#binding my summary data into a dataframe
Summary_birds <- data.frame(Date = unlist(dates), 
                           Max_relative_latitude = unlist(max_north_difference), 
                           Min_relative_latitude = unlist(max_south_difference),
                           Colony = unlist(colony_id),
                           Mean_latitude = unlist(mean_latitude),
                           Trip_distance = unlist(total_dist),
                           Ring = unlist(rings))

#converting the times back into years (because for some reason the unit was seconds from 1970)
Summary_birds$Date <- as.POSIXct(Summary_birds$Date, origin = "1970-01-01 00:00:00")

#This adds a year column to the summary data for the plotting of boxplots
library(lubridate)
Summary_birds <- Summary_birds %>%
  mutate(Year = year(as.POSIXct(Date)))

#Making a little dataframe of each island to reduce the amount of filtering that I need to do 
Summary_cp_birds <- subset(Summary_birds, Colony == "cp")
Summary_sk_birds <- subset(Summary_birds, Colony == "sk")


#####Getting values for SST##

library(ncdf4)
setwd("C:/Users/Lenovo/Downloads")

library(stars) #need to use stars instead of raster because it is irregular
s <- read_stars("cmems-IFREMER-ATL-SST-L4-REP-OBS_FULL_TIME_SERIE_1748792604159.nc") #testing with one

#Now attempting to load SST data for all years at once

#putting all of the files in that folder into a list (i separately downloaded data for only june-august for each year)
nc_files <- list.files(path = "C:/Users/Lenovo/Downloads/NC Data", pattern = "\\.nc$", full.names = TRUE)

nc_files[[6]] #testing

#Reading all of the files
NC_list <- list()
for( i in 1:length(nc_files)) {
  NC_list[[i]] <- read_stars(nc_files[[i]])
}

NC_list[[5]]

#converting into dataframes
sst_list <- lapply(NC_list, function(st) {
  as.data.frame(st, xy = TRUE)  # xy=TRUE adds coordinate columns
})

sst_list[[2]] #testing

library(dplyr)
#Combining into one dataframe
combined_df <- bind_rows(sst_list)

sst_df <- na.omit(combined_df)


#Pulling out only the Year
library(lubridate)
library(dplyr)

sst_df <- sst_df %>%
  mutate(
    time = ymd(time), #It wasn't in date format so converting
    Year = year(time) # Extracting the year
  )

sst_df$time <- as.POSIXct(sst_df$time, format = "%Y-%m-%d", tz = "UTC")


#Removing the [K] unit from the sst column and making it numeric
sst_df <- sst_df %>%
  mutate(
    analysed_sst = as.numeric(gsub(" \\[K\\]", "", analysed_sst))
  )

#also from the error column
sst_df <- sst_df %>%
  mutate(
    analysis_error = as.numeric(gsub(" \\[K\\]", "", analysis_error))
  )

#mean
mean_sst_by_year <- sst_df %>%
  group_by(Year) %>%
  summarise(mean_sst = mean(analysed_sst, na.rm = TRUE))
#overall mean is largely unchanged

#Filtering to just the copeland foraging area

cp_sst <- sst_df %>%
  filter(y >=54.08389 & y <= 55.83244) %>%
  filter(x >= -6.4122 & x <= -4.05774) #The names of the colums are currently just x and y

cp_sst_by_year <- cp_sst %>%
  group_by(Year) %>%
  summarise(mean_sst = mean(analysed_sst))

summary(cp_sst_by_year)

#filtering to skomer too
#Southern foraging area

south_sk_sst <- sst_df %>%
  filter(y >=51.49513956120297 & y <= 52.82602856037225) %>%
  filter(x >= -6.7802039907345515 & x <= -4.502336280617905)
#mean per year
south_sk_ssTrit_means <- south_sk_sst %>%
  group_by(Year) %>%
  summarise(mean_sst = mean(analysed_sst))

#Northern foraging area

north_sk_sst <- sst_df %>%
  filter(y >=53.50053101894776 & y <= 54.51863056317022) %>%
  filter(x >= -6.168353549936458 & x <= -4.615751744997208)
#mean per year
north_sk_sst_means <- north_sk_sst %>%
  group_by(Year) %>%
  summarise(mean_sst = mean(analysed_sst))


# Calculate mean SST per year
mean_sst_per_year <- cp_sst %>%
  group_by(Year) %>%
  summarise(mean_sst = mean(analysed_sst, na.rm = TRUE)) %>%
  ungroup()




####Creating graph from RQ2

library(dplyr)
library(ggplot2)

#Aggregate sst_df by Year and Latitude (lat) for the line showing the sst at the latitude at which they are foraging
sst_summary <- sst_df %>%
  group_by(Year, y) %>%
  summarise(mean_sst = mean(analysed_sst, na.rm = TRUE)) %>%
  ungroup()

# Join SST summary with Mean_latitude by Year
combined_cp1 <- Summary_cp_birds %>%
  left_join(sst_summary, by = "Year") %>%
  group_by(Year) %>%
  # Find the lat closest to Mean_latitude
  mutate(lat_diff = abs(y - Mean_latitude)) %>%
  slice_min(order_by = lat_diff, n = 1) %>%
  ungroup()

combined_sk1 <- Summary_sk_birds %>%
  left_join(sst_summary, by = "Year") %>%
  group_by(Year) %>%
  # Find the lat closest to Mean_latitude
  mutate(lat_diff = abs(y - Mean_latitude)) %>%
  slice_min(order_by = lat_diff, n = 1) %>%
  ungroup()

combined_all <- bind_rows(combined_cp, combined_sk)

#Adding celcius
kelvin_to_celsius <- function(k) {
  k - 273.15
}

combined_all$mean_sst_celsius <- kelvin_to_celsius(combined_all$mean_sst)



# Plot zoom settings and scaling functions
zoom_factor <- 5  # Zoom for the Y axis (latitude)
zoom_factor_sst <- 0.8  # Additional zoom for SST curve only
offset <- 1.4  # Shift SST curve down to avoid overlap

# Calculate zoomed latitude range
lat_range <- range(combined_all$Mean_latitude, na.rm = TRUE)
lat_range_zoomed <- mean(lat_range) + (lat_range - mean(lat_range)) / zoom_factor

# SST range
sst_range <- range(combined_all$mean_sst_celsius, na.rm = TRUE)

#scaling function
scale_sst_to_lat <- function(x) {
  # Scale SST to fit within zoomed latitude range, then stretch with zoom_factor_sst
  (x - sst_range[1]) / diff(sst_range) * diff(lat_range_zoomed) * zoom_factor_sst +
    lat_range_zoomed[1] - offset
}

# Inverse scaling function (for secondary axis)
scale_lat_to_sst <- function(x) {
  (x - lat_range_zoomed[1] + offset) / (diff(lat_range_zoomed) * zoom_factor_sst) * 
    diff(sst_range) + sst_range[1]
}
#scaling functions are necessary otherwise 


Summary_cp_sk_birds <- bind_rows(Summary_cp_birds, Summary_sk_birds)

ggplot() +
  geom_smooth(data = Summary_cp_sk_birds, aes(x = Year, y = Mean_latitude), method = "lm", se = FALSE, size = 1, color = "slateblue") +
  geom_point(data = Summary_cp_sk_birds, aes(x = Year, y = Mean_latitude), size = 0.03, alpha =0.35, color = "slateblue") +
  geom_smooth(data = combined_all, aes(x = Year, y = scale_sst_to_lat(mean_sst_celsius)), method = "loess", span = 0.7, se = FALSE, size = 1, color = "red", linetype = "dashed") +
  scale_y_continuous(
    name = "Mean Relative Latitude",
    sec.axis = sec_axis(~ scale_lat_to_sst(.), name = "SST at Mean Latitude (Â°C)")
  ) +
  labs(title = "Mean Latitude and SST at Latitude Over Time",
       x = "Year") +
  theme_minimal() +
  theme(legend.position = "none")



#RQ2 stats test

#Linear regression (just latitude and year)
lat_lm <- lm(Mean_latitude ~ Year, data = Summary_cp_sk)
summary(lat_lm)
#p value 0.0097, estimate 0.009 degrees latitude per year
#R squared is 0.044 so time only explains some (4%) of variation



#RQ3 Stats test

#looking at the effect of year and SST on mean_latitude
model <- lm(Mean_latitude ~ mean_sst_celsius + Year, data = combined_all)

# Type I ANOVA (sequential sums of squares)
anova(model)
summary(model)
#Year doesn't have a significant effect, SST does


#RQ3 Plot

#plotting mean_sst against mean_latitude, removing the small effect of year

# Create predicted values with confidence intervals
newdata <- data.frame(
  Year = median(combined_all$Year, na.rm = TRUE),
  mean_sst_celsius = seq(min(combined_all$mean_sst_celsius, na.rm = TRUE), 
                         max(combined_all$mean_sst_celsius, na.rm = TRUE), 
                         length.out = 100)
)

# Predict with confidence intervals
pred <- predict(model, newdata, interval = "confidence")

# Bind predictions to newdata
newdata <- cbind(newdata, pred)

#ggplot(combined_all, aes(x = mean_sst_celsius, y = Mean_latitude, color = Year)) +
ggplot(combined_all, aes(x = mean_sst_celsius, y = Mean_latitude, color = Year))+
  geom_point(alpha = 1) +
  geom_ribbon(data = newdata, aes(x = mean_sst_celsius, ymin = lwr, ymax = upr), 
              fill = "navy", alpha = 0.1, inherit.aes = FALSE) +
  geom_line(data = newdata, aes(x = mean_sst_celsius, y = fit), 
            color = "navy", size = 1) +
  labs(title = "Mean Relative Latitude vs SST (adjusted for Year)",
       x = "Mean SST (Â°C)", y = "Mean Relative Latitude",
       color = "Year") +
  theme_minimal() 


#finding gradient
model2 <- lm(Mean_latitude ~ mean_sst_celsius, data = combined_all)
summary(model2)

#This gradient is converted from latitude to km assuming 1 degree latitude = 111km 
